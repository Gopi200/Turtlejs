STARTFILE tup.lua
-- Import a version of the turtle module that updates location
--require("./mnt/tracker")
Event = require("./mnt/eventhandler")
for _,file in pairs(fs.list("/temp")) do
    fs.delete("/temp/"..file)
end

-- All functions that will be run in parallel with WScomm
function addyield(func, ...)
    coroutine.yield()
    func(...)
end

local function HandleMessage(message)
    if message.luafile ~= nil then
        for name, file in pairs(message.luafile) do
            local f = fs.open("/temp/"..name, "w")
            f.write(file)
            f.close()
            multishell.launch({}, "/temp/"..name)
        end
    end

    if message.get ~= nil then
        local response = {}
        for _, value in pairs(message.get) do
            response[value] = settings.get(value)
        end
        WShandle.send(textutils.serializeJSON(response))
    end

    if message.run ~= nil then
        for _, func in pairs(message.run) do
            load(func)()
        end
        return true
    end

    if message.stop ~= nil then
        return true
    end
    return true
end

local function WebSocketSuccessHandler(URL, handle)
    print(handle)
    print(URL)
    WShandle = handle
    WShandle.send(textutils.serializeJSON({
        id = settings.get("ID"),
        driveid = settings.get("DriveID")
    }))
end

local function WebSocketMessageHandler(URL, content, bin)
    WShandle.send(textutils.serialiseJSON(HandleMessage(textutils.unserialiseJSON(content))))
end

local function WebSocketConnect()
    http.websocketAsync("ws://" .. settings.get("Server_URL"))
end

Event.addListener("websocket_success", WebSocketSuccessHandler)
Event.addListener("websocket_failure", WebSocketConnect)
Event.addListener("websocket_closed", WebSocketConnect)
Event.addListener("websocket_message", WebSocketMessageHandler)

local function testfunc()
    print(1)
    coroutine.yield()
    print(2)
    coroutine.yield()
    print(3)
end

WebSocketConnect()
Event.Oslistenerthread()
--parallel.waitForAny(testfunc, Event.Oslistenerthread)
print("Wuh oh")
ENDFILE
STARTFILE thandler.lua
local EventListeners = {}
local Event = {}

function Event.createType(name)
    EventListeners[name] = {}
end

function Event.removeType(name)
    table.remove(EventListeners, name)
end

function Event.addListener(eventtype, func)
    if EventListeners[eventtype] == nil then
        Event.createType(eventtype)
    end
    table.insert(EventListeners[eventtype], func)
end

function Event.trigger(eventtype, eventdata)
    if EventListeners[eventtype] ~= nil then
        for _, func in pairs(EventListeners[eventtype]) do
            func(table.unpack(eventdata))
        end
    end
end

function Event.Oslistenerthread()
    while true do
        local eventdata = {os.pullEvent()}
        local eventtype = table.remove(eventdata, 1)
        print(eventtype)
        Event.trigger(eventtype, eventdata)
    end
end

return Event

--I have a function that looks for a websocket event, and kills the program if it's waited on
--To fix this i need to not ever wait on it. Is there a way to run it as a sub-function?
ENDFILE
STARTFILE ker.lua
local up = turtle.up
function turtle.up()
    local res = {up()}
    if res[1] == true then
        local newpos = settings.get("pos")
        newpos[2] = newpos[2] + 1
        settings.set("pos", newpos)
        settings.save()
    end
    return table.unpack(res)
end

local down = turtle.down
function turtle.down()
    local res = {down()}
    if res[1] == true then
        local newpos = settings.get("pos")
        newpos[2] = newpos[2] - 1
        settings.set("pos", newpos)
        settings.save()
    end
    return table.unpack(res)
end

local forward = turtle.forward
function turtle.forward()
    local res = {forward()}
    if res[1] == true then
        local newpos = settings.get("pos")
        local editedpos = ({
            N = {0, -1},
            E = {1, 0},
            S = {0, 1},
            W = {-1, 0}
        })[newpos[4]]
        newpos[1], newpos[3] = newpos[1] + editedpos[1], newpos[3] + editedpos[2]
        settings.set("pos", newpos)
        settings.save()
    end
    return table.unpack(res)
end

local back = turtle.back
function turtle.back()
    local res = {back()}
    if res[1] == true then
        local newpos = settings.get("pos")
        local editedpos = ({
            N = {0, 1},
            E = {-1, 0},
            S = {0, -1},
            W = {1, 0}
        })[newpos[4]]
        newpos[1], newpos[3] = newpos[1] + editedpos[1], newpos[3] + editedpos[2]
        settings.set("pos", newpos)
        settings.save()
    end
    return table.unpack(res)
end

local turnLeft = turtle.turnLeft
function turtle.turnLeft()
    local res = {turnLeft()}
    if res[1] == true then
        local newpos = settings.get("pos")
        newpos[4] = ({
            N = "W",
            E = "N",
            S = "E",
            W = "S"
        })[newpos[4]]
        settings.set("pos", newpos)
        settings.save()
    end
    return table.unpack(res)
end

local turnRight = turtle.turnRight
function turtle.turnRight()
    local res = {turnRight()}
    if res[1] == true then
        local newpos = settings.get("pos")
        newpos[4] = ({
            N = "W",
            E = "N",
            S = "E",
            W = "S"
        })[newpos[4]]
        settings.set("pos", newpos)
        settings.save()
    end
    return table.unpack(res)
end

ENDFILE
STARTFILE adtest.lua
function CRF1()
    print(1)
    coroutine.yield()
end

function CRF2()
    print(2)
end

CR1 = coroutine.create(CRF1)
CR2 = coroutine.create(CRF2)

coroutine.resume(CR1)
print("1 done")
coroutine.resume(CR2)
print("2 done")
print(coroutine.status(CR1))
print(coroutine.status(CR2))
coroutine.resume(CR1)
print(coroutine.status(CR1))
ENDFILE
STARTFILE /startup.lua
if fs.exists("startup.lua") then
    shell.run("startup")
else
    -- copy everything from disk/turtle to ./
    local files = fs.list("disk/turtle/")

    for _, file in pairs(files) do
        fs.copy("disk/turtle/" .. file, file)
        fs.makeDir(temp)
    end

    -- set up data on turtle
    settings.load("disk/.settings")

    -- register a turtle through api
    while true do
        local res = http.post("http://" .. settings.get("Server_URL") .. "/ID", "", {
            driveid = tostring(settings.get("DriveID"))
        })
        local ID = res.readLine()
        if ID:sub(1, 7) ~= "Error: " then
            settings.set("ID", tonumber(ID))
            os.setComputerLabel(res.readLine())
            break
        end
        os.sleep(10)
    end

    settings.save()
    os.reboot()
end

ENDFILE
