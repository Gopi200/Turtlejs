STARTFILE startup.lua
-- Import a version of the turtle module that updates location
require("./tracker")

-- All functions that will be run in parallel with WScomm
parallelfuncs = {}

function yield()
    os.startTimer(0.05)
    yield()
end

function addyield(func, ...)
    yield()
    func(...)
end

local function HandleMessage(message)
    if message.functions ~= nil then
        for _, func in pairs(message.functions) do
            load(func)()
        end
    end
    if message.get ~= nil then
        local response = {}
        for _, value in pairs(message.get) do
            response[value] = settings.get(value)
        end
        WShandle.send(textutils.serializeJSON(response))
    end

    if message.run ~= nil then
        parallelfuncs = {}
        for _, func in pairs(message.run) do
            table.insert(parallelfuncs, load(func))
        end
        return true
    end
    if message.stop ~= nil then
        parallelfuncs = {}
        return true
    end
end

function WScomm()
    while true do
        local eventData = {os.pullEvent()}

        if eventData[1] == "websocket_success" then
            WShandle = eventData[3]
            WShandle.send(textutils.serializeJSON({
                id = settings.get("ID"),
                driveid = settings.get("DriveID")
            }))
        elseif eventData[1] == "websocket_failure" or eventData[1] == "websocket_closed" then
            http.websocketAsync("ws://" .. settings.get("Server_URL"))
        elseif eventData[1] == "websocket_message" then
            if HandleMessage(textutils.unserialiseJSON(eventData[3])) then
                return
            end
        end
    end
end

http.websocketAsync("ws://" .. settings.get("Server_URL"))
while true do
    parallel.waitForAny(WScomm, table.unpack(parallelfuncs))
end

ENDFILE
STARTFILE tracker.lua
local up = turtle.up
function turtle.up()
    local res = {up()}
    if res[1] == true then
        local newpos = settings.get("pos")
        newpos[2] = newpos[2] + 1
        settings.set("pos", newpos)
        settings.save()
    end
    return table.unpack(res)
end

local down = turtle.down
function turtle.down()
    local res = {down()}
    if res[1] == true then
        local newpos = settings.get("pos")
        newpos[2] = newpos[2] - 1
        settings.set("pos", newpos)
        settings.save()
    end
    return table.unpack(res)
end

local forward = turtle.forward
function turtle.forward()
    local res = {forward()}
    if res[1] == true then
        local newpos = settings.get("pos")
        local editedpos = ({
            N = {0, -1},
            E = {1, 0},
            S = {0, 1},
            W = {-1, 0}
        })[newpos[4]]
        newpos[1], newpos[3] = newpos[1] + editedpos[1], newpos[3] + editedpos[2]
        settings.set("pos", newpos)
        settings.save()
    end
    return table.unpack(res)
end

local back = turtle.back
function turtle.back()
    local res = {back()}
    if res[1] == true then
        local newpos = settings.get("pos")
        local editedpos = ({
            N = {0, 1},
            E = {-1, 0},
            S = {0, -1},
            W = {1, 0}
        })[newpos[4]]
        newpos[1], newpos[3] = newpos[1] + editedpos[1], newpos[3] + editedpos[2]
        settings.set("pos", newpos)
        settings.save()
    end
    return table.unpack(res)
end

local turnLeft = turtle.turnLeft
function turtle.turnLeft()
    local res = {turnLeft()}
    if res[1] == true then
        local newpos = settings.get("pos")
        newpos[4] = ({
            N = "W",
            E = "N",
            S = "E",
            W = "S"
        })[newpos[4]]
        settings.set("pos", newpos)
        settings.save()
    end
    return table.unpack(res)
end

local turnRight = turtle.turnRight
function turtle.turnRight()
    local res = {turnRight()}
    if res[1] == true then
        local newpos = settings.get("pos")
        newpos[4] = ({
            N = "W",
            E = "N",
            S = "E",
            W = "S"
        })[newpos[4]]
        settings.set("pos", newpos)
        settings.save()
    end
    return table.unpack(res)
end

ENDFILE
STARTFILE disk/startup.lua
if fs.exists("startup.lua") then
    shell.run("startup")
else
    -- copy everything from disk/turtle to ./
    local files = fs.list("disk/turtle/")

    for _, file in pairs(files) do
        fs.copy("disk/turtle/" .. file, file)
    end

    -- set up data on turtle
    settings.load("disk/.settings")

    -- register a turtle through api
    while true do
        local res = http.post("http://" .. settings.get("Server_URL") .. "/ID", "", {
            driveid = tostring(settings.get("DriveID"))
        })
        local ID = res.readLine()
        if ID:sub(1, 7) ~= "Error: " then
            settings.set("ID", tonumber(ID))
            os.setComputerLabel(res.readLine())
            break
        end
        os.sleep(10)
    end

    settings.save()
    os.reboot()
end

ENDFILE
